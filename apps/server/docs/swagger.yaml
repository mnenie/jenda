definitions:
  controllers.EditUserRequest:
    properties:
      color:
        example: '#00ff00'
        type: string
      email:
        example: new.email@example.com
        type: string
      nickname:
        example: updated_user
        type: string
      password:
        example: newpassword123
        type: string
      photoUrl:
        example: https://example.com/new-photo.jpg
        type: string
      role:
        example: admin
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        example: error description
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: strongpassword123
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  controllers.SignUpRequest:
    properties:
      color:
        example: '#ff0000'
        type: string
      email:
        example: user@example.com
        type: string
      nickname:
        example: cool_user123
        type: string
      password:
        example: strongpassword123
        type: string
      photoUrl:
        example: https://example.com/photo.jpg
        type: string
      role:
        example: user
        type: string
    type: object
  controllers.SimpleResponse:
    properties:
      message:
        example: success
        type: string
    type: object
  models.User:
    properties:
      color:
        type: string
      email:
        type: string
      nickname:
        type: string
      password:
        type: string
      photoUrl:
        type: string
      refreshToken:
        type: string
      role:
        type: string
    type: object
info:
  contact: {}
  description: API for user authentication and management
  title: Jenda Backend User Service
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Log in with email and password
      parameters:
      - description: Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Authenticate user
      tags:
      - authentication
  /logout:
    post:
      description: Invalidate refresh token and clear cookies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SimpleResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Log out user
      tags:
      - authentication
  /refresh:
    post:
      description: Get new access token using refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Refresh access token
      tags:
      - authentication
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SimpleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - authentication
  /users/{id}:
    delete:
      description: Permanently delete user account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SimpleResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.EditUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SimpleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /validate:
    get:
      description: Check if user is authenticated
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Validate authentication
      tags:
      - authentication
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
